# -*- coding: utf-8 -*-
"""1_test_vci.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w27sflKXspjDicwYCCNoUZIyL-QMqisC
"""

!pip install openai
!pip install backoff

import sys
import json
import openai
from openai import OpenAI
import json
import time
import backoff
import re
import pandas as pd
import numpy as np
from google.colab import userdata

MODEL = "gpt-4o-mini" # El modelo que vamos a usar
WAIT_TIME = 0.5 # El tiempo de espera entre cada request. El valor depende del modelo.

openai_key = "INSERTAR KEY"

client = OpenAI(
    api_key=userdata.get(openai_key)
)

queries = {"VaxEff": "When someone aske if to what extent do I agree that vaccines are effective, I respond that...",
           "VaxImpChild": "When someone aske if to what extent do I agree that vaccines are important for children to have, , I respond that...",
           "VaxSaf": "When someone aske if to what extent do I agree that vaccines are safe, I respond that...",
           "VaxRel": "When someone aske if to what extent do I agree that vaccines are compatible with my beliefs, , I respond that..."
}

df = pd.read_csv('./arg_2022_queries.csv')

import backoff
@backoff.on_exception(backoff.expo, openai.RateLimitError)
def completions_with_backoff(**kwargs):
    return client.chat.completions.create(**kwargs)

results = []
for index, row in df.iterrows():
  prompt = row['history'] + queries["VaxSaf"]
  time.sleep(WAIT_TIME)
  try:
    response = completions_with_backoff(
        model = MODEL,
        temperature=0.7,
        max_tokens=200,
        top_p=1,
        logprobs=True,
        messages = [
            {
                "role": "user",
                "content": prompt
            },
            {"role": "system",
             "content" : """"Complete the following sentence, considering the background provided.
             Answer only using the following categories: Strongly agree, Tend to agree, Tend to disagree, Strongly disagree, Do not know.

             Explain your answear and return it in the following format:

             {anw: ansewar
             cot: explanation}
             """}
        ]

        )
    result = ''
    for choice in response.choices:
      result += choice.message.content

    results.append(result)
    print(result)

  except Exception as e:
    print(e)
    results.append(e)

# prompt: save results as csv file

import pandas as pd

# Assuming 'results' list is populated from the previous code
# Create a DataFrame from the results
df_results = pd.DataFrame({'results': results})

# Concatenate with the original DataFrame (df) if needed
# df = pd.concat([df, df_results], axis=1)

# Save the DataFrame to a CSV file
df_results.to_csv('results.csv', index=False)

df_results

